#!/bin/bash
# [Reference] https://docs.docker.com/registry/deploying/
# [TODO] enable TLS
# [TODO] support docker content trust

#------------------------------------------------------------------------------
# Copyright (c) 2019, tarlety@gmail.com
#
# Zerus Scripting Standard v0.4.0
#
# This standard defines script state management framework.
# Following this framework, you can manage app states in a consistent way.
#
# Environments:
#
#    SECRET	Where to keep secrets.
#    CONFIG	Where to keep configurations.
#    STORE	Where to keep persistent data.
#
# Commands:
#
#    env                Display all runtime environments, configurables, and required tools.
#    config ...         Set configurations by this command.
#    secret-create      Create new secrets.
#    state [config/secret/data] [list/save/load] [state-name]
#                       App state type includes config, secret, and data.
#                       The state can be saved or loaded.
#                       Default state type is all states and default action is "list".
#
# Scnario:
#
#    1. First, use "<scirptname> env" to confirm the state is clean.
#    2. Then, use "<scriptname> config" to know how many configurations you have to set.
#    3. Then, use "<scriptname> secret-create" to create secret files.
#    4. Then, use "<scriptname> env" again to confirm the state is what you want.

#------------------------------------------------------------------------------
# Environments:

VERSION=0.4.0
APPNAME=registry
SCRIPTNAME=docker-apps-${APPNAME}
SECRET=${SECRET:-"${PWD}/.secret/${SCRIPTNAME}"}
CONFIG=${CONFIG:-"${PWD}/.config/${SCRIPTNAME}"}
SALT=${SECRET}/salt

DEFAULT_STORE=${STORE:-"${PWD}/.store/${SCRIPTNAME}"}
DEFAULT_BASE_CONFIG=nop
DEFAULT_BASE_SECRET=nop
DEFAULT_BASE_DATA=nop
DEFAULT_IMAGE=registry:2
DEFAULT_UI_IMAGE=hyper/docker-registry-web:v0.1.2
DEFAULT_HOST_PORT=5000
DEFAULT_HOST_UI_PORT=8080
DEFAULT_GPGKEYNAME=$(whoami)

STORE=`cat ${CONFIG}/store 2>/dev/null`
BASE_CONFIG=`cat ${CONFIG}/base_config 2>/dev/null`
BASE_SECRET=`cat ${CONFIG}/base_secret 2>/dev/null`
BASE_DATA=`cat ${CONFIG}/base_data 2>/dev/null`
IMAGE=`cat ${CONFIG}/image 2>/dev/null`
UI_IMAGE=`cat ${CONFIG}/ui_image 2>/dev/null`
HOST_PORT=`cat ${CONFIG}/host_port 2>/dev/null`
HOST_UI_PORT=`cat ${CONFIG}/host_ui_port 2>/dev/null`
GPGKEYNAME=`cat ${CONFIG}/gpgkeyname 2>/dev/null`

#------------------------------------------------------------------------------
# Commands

case $1 in
	"version")
		echo ${VERSION}
		;;
	"env")
		echo =========================================================================
		echo "## SCRIPT NAME: ${SCRIPTNAME}"
		echo - VERSION: ${VERSION}
		echo - STORE: ${STORE}
		echo - SECRET: ${SECRET} $(echo $(cat ${SALT} 2>/dev/null) $(cat ${SECRET}/* | sha256sum 2>/dev/null) | sha1sum | cut -c1-8)
		echo - CONFIG: ${CONFIG}
		echo - IMAGE: ${IMAGE}
		echo - UI_IMAGE: ${UI_IMAGE}
		echo - HOST_PORT: ${HOST_PORT}
		echo - HOST_UI_PORT: ${HOST_UI_PORT}
		echo - GPGKEYNAME: ${GPGKEYNAME} $(gpg -k ${GPGKEYNAME} 2>/dev/null | sed -n '2p' | xargs)
		echo - SALT: $(ls ${SALT} 2>/dev/null) $(cat ${SALT} ${SALT} 2>/dev/null | sha1sum | cut -c1-8)
		echo "## REQUIREMENT:"
		echo - docker: $(which docker)
		echo - jq: $(which jq)
		echo - sponge: $(which sponge)
		echo - tar: $(which tar)
		echo - gpg: $(which gpg)
		echo - colordiff: $(which colordiff)
		echo =========================================================================
		;;
	"config")
		shift
		mkdir -p ${CONFIG}
		case $1 in
			"store")
				shift
				STORE=${1:-${DEFAULT_STORE}}
				echo ${STORE} > ${CONFIG}/store
				;;
			"image")
				shift
				IMAGE=${1:-${DEFAULT_IMAGE}}
				echo ${IMAGE} > ${CONFIG}/image
				;;
			"ui_image")
				shift
				UI_IMAGE=${1:-${DEFAULT_UI_IMAGE}}
				echo ${UI_IMAGE} > ${CONFIG}/ui_image
				;;
			"host_port")
				shift
				HOST_PORT=${1:-${DEFAULT_HOST_PORT}}
				echo ${HOST_PORT} > ${CONFIG}/host_port
				;;
			"host_ui_port")
				shift
				HOST_UI_PORT=${1:-${DEFAULT_HOST_UI_PORT}}
				echo ${HOST_UI_PORT} > ${CONFIG}/host_ui_port
				;;
			"gpg")
				shift
				GPGKEYNAME=${1:-${DEFAULT_GPGKEYNAME}}
				echo ${GPGKEYNAME} >  ${CONFIG}/gpgkeyname
				;;
			*)
				echo $(basename $0) config "<config_name>" "<config_value>"
				echo ""
				echo "config names:"
				echo "	store		The local repository for state."
				echo "			Ex: $(basename $0) config store ${DEFAULT_STORE}"
				echo "	image		The docker image to download."
				echo "			Ex: $(basename $0) config store ${DEFAULT_IMAGE}"
				echo "	ui_image	Web UI, authentication service and event recorder for private docker registry v2."
				echo "			Ex: $(basename $0) config store ${DEFAULT_UI_IMAGE}"
				echo "	host_port	The host machine port."
				echo "			Ex: $(basename $0) config store ${DEFAULT_HOST_PORT}"
				echo "	host_ui_port	The host machine port for Web UI."
				echo "			Ex: $(basename $0) config store ${DEFAULT_HOST_UI_PORT}"
				echo "	gpg		configure which gpg key to use."
				echo "			Ex: $(basename $0) config gpg ${DEFAULT_GPGKEYNAME}"
				;;
		esac
		;;
	"secret-create")
		mkdir -p ${SECRET}
		USERNAME=$(whoami)
		PASSWORD=$(gpg --gen-random --armor 2 20 | head -c16)
		echo ${USERNAME} | gpg -ear ${GPGKEYNAME} -o ${SECRET}/username.enc
		echo ${PASSWORD} | gpg -ear ${GPGKEYNAME} -o ${SECRET}/password.enc
		docker run --entrypoint htpasswd ${IMAGE} -Bbn ${USERNAME} ${PASSWORD} > ${SECRET}/htpasswd
		gpg --gen-random --armor 2 16 | base64 | cut -c1-16 > ${SALT}
		;;
	"state")
		shift
		ACTION=$1
		TYPE=$2
		STATENAME=$3

		mkdir -p ${STORE}/state ${STORE}/data
		case ${ACTION} in
			"save")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_config
					$0 env > ${CONFIG}/env
					cd ${CONFIG}
					tar -zcf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz .
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_secret
					mv -f ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ${STORE}/state/${STATENAME}-bak-${APPNAME}-secret.tgz.enc &>/dev/null
					cd ${SECRET}
					tar -zc . | gpg -ear ${GPGKEYNAME} -o ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc
					cd - &> /dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo ${STATENAME} > ${CONFIG}/base_data
					mv -f ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc ${STORE}/data/${STATENAME}-bak-${APPNAME}-data.tgz.enc 2>/dev/null
					cd ${STORE}/docker
					tar -zc . | gpg -ear ${GPGKEYNAME} -o ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc
					cd - &> /dev/null
				fi
				;;
			"load")
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz ]
					then
						cd ${CONFIG}
						tar -zxf ${STORE}/state/${STATENAME}-${APPNAME}-config.tgz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_config
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc ]
					then
						cd ${SECRET}
						gpg -d ${STORE}/state/${STATENAME}-${APPNAME}-secret.tgz.enc | tar xz
						cd - &> /dev/null
					fi
					echo ${STATENAME} > ${CONFIG}/base_secret
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					if [ -e ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc ]
					then
						mkdir -p ${STORE}/docker
						cd ${STORE}/docker
						gpg -d ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc | tar xz
						echo ${STATENAME} > ${CONFIG}/base_data
						cd - &> /dev/null
					fi
				fi
				;;
			"list"|*)
				HC='\033[0;93m'
				NC='\033[0m'
				if [ "${TYPE}" == "config" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## CONFIG: ${BASE_CONFIG}${NC}"
					cd ${STORE}/state
					ls *-${APPNAME}-config.tgz 2>/dev/null | sed "s/\(.*\)-${APPNAME}-config.tgz/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "secret" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## SECRET: ${BASE_SECRET}${NC}"
					cd ${STORE}/state
					ls *-${APPNAME}-secret.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-secret.tgz.enc/           \1/"
					cd - &>/dev/null
				fi
				if [ "${TYPE}" == "data" -o "${TYPE}" == "" ]; then
					echo -e "${HC}## DATA  : ${BASE_DATA}${NC}"
					cd ${STORE}/data
					ls *-${APPNAME}-data.tgz.enc 2>/dev/null | sed "s/\(.*\)-${APPNAME}-data.tgz.enc/           \1/"
					cd - &>/dev/null
				fi

				echo -e "${HC}## ENV   : STATE                                              | CURRENT${NC}"
				$0 env | colordiff -y --suppress-common-lines ${CONFIG}/env -
				;;
		esac
		;;
	"app")
		shift
		case $1 in
			"up")
				docker run \
				    --volume=${SECRET}/htpasswd:/auth/htpasswd \
				    --volume=${STORE}/docker/registry:/var/lib/registry \
				    --env=REGISTRY_AUTH=htpasswd \
				    --env="REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
				    --env=REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
				    --publish=${HOST_PORT}:5000 \
                                    --restart=always \
                                    --detach=true \
                                    --name=${APPNAME} \
                                    ${IMAGE}
				;;
			"down")
				docker stop ${APPNAME}
				docker rm ${APPNAME}
				;;
		esac
		;;
	"proxy")
		# pull-through cached mirroring
		# https://stackoverflow.com/questions/30930847/how-to-set-up-a-docker-registry-acting-as-a-proxy
		shift
		case $1 in
			"up")
				docker run \
				    --volume=${PWD}/config.yml:/etc/docker/registry/config.yml \
				    --volume=${STORE}/docker/registry:/var/lib/registry \
				    --env=REGISTRY_AUTH=none \
				    --publish=${HOST_PORT}:5000 \
                                    --restart=always \
                                    --detach=true \
                                    --name=${APPNAME}-proxy \
                                    ${IMAGE}
				[[ -e /etc/docker/daemon.json ]] || echo '{}' | sudo tee -a /etc/docker/daemon.json
				jq '. + {"registry-mirrors": ["http://localhost:5000"]}' /etc/docker/daemon.json | \
					sudo sponge /etc/docker/daemon.json
				;;
			"down")
				docker stop ${APPNAME}-proxy
				docker rm ${APPNAME}-proxy
				jq 'del(."registry-mirrors")' /etc/docker/daemon.json | \
					sudo sponge /etc/docker/daemon.json
				;;
		esac
		;;
	"ui")
		shift
		case $1 in
			"up")
				USERNAME=$(gpg -d ${SECRET}/username.enc)
				PASSWORD=$(gpg -d ${SECRET}/password.enc)
				BASICAUTH=$(echo -n ${USERNAME}:${PASSWORD} | base64)
				docker run \
				    --env=REGISTRY_URL=http://${APPNAME}:5000/v2 \
				    --env=REGISTRY_NAME=localhost:5000 \
				    --env=REGISTRY_AUTH_ENABLED=false \
				    --env=REGISTRY_BASIC_AUTH="${BASICAUTH}" \
				    --link=${APPNAME}:${APPNAME} \
				    --publish=${HOST_UI_PORT}:8080 \
                                    --restart=always \
                                    --detach=true \
                                    --name=${APPNAME}-ui \
                                    ${UI_IMAGE}
				;;
			"down")
				docker stop ${APPNAME}-ui
				docker rm ${APPNAME}-ui
				;;
		esac
		;;
	*)
		echo $(basename $0) version
		echo $(basename $0) env
		echo $(basename $0) config ...
		echo $(basename $0) secret-create
		echo $(basename $0) "state [list/save/load] [config/secret/data] [state_name, ex: date-stage-env]"
		echo $(basename $0) "[app/proxy/ui] [up/down]"
		;;
esac

