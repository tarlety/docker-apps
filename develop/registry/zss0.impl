#!/bin/bash
# [Reference] https://docs.docker.com/registry/deploying/
# [TODO] support docker content trust

# zss interface
case $1 in
	"app")
		PROJECTNAME=docker-apps
		APPNAME=registry
		APPVERSION=0.1.1
		;;
	"config")
		CONFIGKEYS="image ui_image registry_port ui_port"
		declare -A CONFIG_DESCRIPTIONS
		CONFIG_DESCRIPTIONS=( \
			["image"]="The registry docker image to download." \
			["ui_image"]="Web UI, authentication service and event recorder for private docker registry v2." \
			["registry_port"]="The registry service port of host machine." \
			["ui_port"]="The Web UI port for registry of host machine." \
			)

		DEFAULT_IMAGE=registry:2
		DEFAULT_UI_IMAGE=hyper/docker-registry-web:v0.1.2
		DEFAULT_REGISTRY_PORT=5000
		DEFAULT_UI_PORT=8080
		;;
	"vars")
		EXTFILE=${SECRET}/v3.ext
		KEY=${SECRET}/domain.key
		CRT=${SECRET}/domain.crt
		REQ=${SECRET}/domain.req
		;;
	"requirement")
		echo - docker: $(which docker)
		echo - jq: $(which jq)
		echo - sponge: $(which sponge)
		;;
	"secret-create")
		rm -f ${SECRET}/username.enc ${SECRET}/password.enc
		USERNAME=$(whoami)
		PASSWORD=$(gpg --gen-random --armor 2 20 | head -c16)
		echo ${USERNAME} | gpg -ear ${GPGKEY} -o ${SECRET}/username.enc
		echo ${PASSWORD} | gpg -ear ${GPGKEY} -o ${SECRET}/password.enc

		rm -f ${KEY}.enc ${REQ}.enc ${CRT}.enc
		DOMAIN=registry
		SUBJECT=/C=CN/ST=State/L=Location/O=Org/OU=Unit/CN=${DOMAIN}
		./v3.ext.template ${DOMAIN} > ${EXTFILE}
		openssl genrsa -out ${KEY}
		openssl req -sha512 -new -key ${KEY} -out ${REQ} -subj ${SUBJECT}
		openssl x509 -sha512 -req -days 365 -in ${REQ} -signkey ${KEY} -out ${CRT} -extfile ${EXTFILE}
		gpg -ear ${GPGKEY} -o ${KEY}.enc ${KEY}
		gpg -ear ${GPGKEY} -o ${REQ}.enc ${REQ}
		gpg -ear ${GPGKEY} -o ${CRT}.enc ${CRT}
		rm ${KEY} ${REQ} ${CRT}
		;;
	"state-data-save")
		mv -f ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc ${STORE}/data/${STATENAME}-bak-${APPNAME}-data.tgz.enc 2>/dev/null
		cd ${STORE}/docker
		tar -zc . | gpg -ear ${GPGKEY} -o ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc
		cd - &> /dev/null
		;;
	"state-secret-load-post")
		;;
	"state-data-load")
		if [ -e ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc ]
		then
			mkdir -p ${STORE}/docker
			cd ${STORE}/docker
			gpg -d ${STORE}/data/${STATENAME}-${APPNAME}-data.tgz.enc | tar xz
			cd - &> /dev/null
		fi
		;;
	# AppImplementing Section: commands
	#------------------------------------------------------------------------------
	"command")
		shift
		mkdir -p ${STORE}/docker/secrets/htpasswd ${STORE}/docker/secrets/certs
		case $1 in
		"app")
			shift
			case $1 in
				"up")
					USERNAME=$(gpg -d ${SECRET}/username.enc)
					PASSWORD=$(gpg -d ${SECRET}/password.enc)
					docker run --entrypoint htpasswd ${IMAGE} \
						-Bbn ${USERNAME} ${PASSWORD} \
						> ${STORE}/docker/secrets/htpasswd/htpasswd
					gpg -d ${KEY}.enc > ${STORE}/docker/secrets/certs/domain.key
					gpg -d ${CRT}.enc > ${STORE}/docker/secrets/certs/domain.crt
					docker run \
					    --volume=${SECRET}/htpasswd:/auth/htpasswd \
					    --volume=${STORE}/docker/registry:/var/lib/registry \
					    --env=REGISTRY_AUTH=htpasswd \
					    --env="REGISTRY_AUTH_HTPASSWD_REALM=Registry Realm" \
					    --env=REGISTRY_AUTH_HTPASSWD_PATH=/auth/htpasswd \
					    --publish=${REGISTRY_PORT}:5000 \
					    --restart=always \
					    --detach=true \
					    --name=${APPNAME} \
					    ${IMAGE}
					;;
				"down")
					docker stop ${APPNAME}
					docker rm ${APPNAME}
					;;
			esac
			;;
		"proxy")
			# pull-through cached mirroring
			# https://stackoverflow.com/questions/30930847/how-to-set-up-a-docker-registry-acting-as-a-proxy
			shift
			case $1 in
				"up")
					gpg -d ${KEY}.enc > ${STORE}/docker/secrets/certs/domain.key
					gpg -d ${CRT}.enc > ${STORE}/docker/secrets/certs/domain.crt
					docker run \
					    --volume=${STORE}/docker/registry:/var/lib/registry \
					    --volume=${PWD}/config.yml:/etc/docker/registry/config.yml:ro \
					    --volume=${STORE}/docker/secrets:/secrets:ro \
					    --env=REGISTRY_HTTP_TLS_CERTIFICATE=/secrets/certs/domain.crt \
					    --env=REGISTRY_HTTP_TLS_KEY=/secrets/certs/domain.key \
					    --env=REGISTRY_AUTH=none \
					    --publish=${REGISTRY_PORT}:5000 \
					    --restart=always \
					    --detach=true \
					    --name=${APPNAME} \
					    ${IMAGE}
					[[ -e /etc/docker/daemon.json ]] || echo '{}' | sudo tee -a /etc/docker/daemon.json
					jq '. + {"registry-mirrors": ["https://localhost:5000"]}' /etc/docker/daemon.json | \
						sudo sponge /etc/docker/daemon.json
					sudo cp ${STORE}/docker/secrets/certs/domain.crt /usr/local/share/ca-certificates/registry:5000.crt
					sudo update-ca-certificates
					sudo systemctl restart docker ;
					;;
				"down")
					docker stop ${APPNAME}
					docker rm ${APPNAME}
					jq 'del(."registry-mirrors")' /etc/docker/daemon.json | \
						sudo sponge /etc/docker/daemon.json
					;;
			esac
			;;
		"ui")
			shift
			case $1 in
				"up")
					USERNAME=$(gpg -d ${SECRET}/username.enc)
					PASSWORD=$(gpg -d ${SECRET}/password.enc)
					BASICAUTH=$(echo -n ${USERNAME}:${PASSWORD} | base64)
					docker run \
					    --volume=${STORE}/docker/secrets/certs/domain.crt:/usr/local/share/ca-certificates/domain.crt:ro \
					    --env=REGISTRY_URL=https://${APPNAME}:5000/v2 \
					    --env=REGISTRY_NAME=localhost:5000 \
					    --env=REGISTRY_AUTH_ENABLED=false \
					    --env=REGISTRY_BASIC_AUTH="${BASICAUTH}" \
					    --link=${APPNAME}:${APPNAME} \
					    --publish=${UI_PORT}:8080 \
					    --restart=always \
					    --detach=true \
					    --name=${APPNAME}-ui \
					    ${UI_IMAGE}
					docker exec ${APPNAME}-ui update-ca-certificates
					;;
				"down")
					docker stop ${APPNAME}-ui
					docker rm ${APPNAME}-ui
					;;
			esac
			;;
		esac
		chmod -R og-rwx ${STORE}/docker/secrets
		;;
	#------------------------------------------------------------------------------
	"usage")
		echo $(basename $0) "[app/proxy/ui] [up/down]"
		;;
esac

